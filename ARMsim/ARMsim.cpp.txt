/* I have neither given nor received any unauthorized aid on this assignment. */
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <map>
using namespace std;

string instruction;
string simInstruction;
int address = 60;
int cycle = 1;  
ofstream dFile("disassembly.txt");
ofstream sFile ("simulation.txt");

int binaryToDecimal(int n)
{
    int num = n;
    int dec = 0;
    int base = 1;
    int temp = num;
    while (temp){
        int lastDigit = temp % 10; 
        temp = temp/10;
        
        dec += lastDigit * base;
        base = base * 2;
    }
    //return;
    return dec; 
}

string twoCompliment(string str)
{
    string tComp = str;
    int index = 0; 

    for (int i = 0; i <str.length(); i++)
    {
        if(str[i] == '1')
        {
            index = i;
        }
    }

    for (int i = 0; i < index; i++)
    {
        if (str[i] == '1')
        {
            tComp[i] = '0';
        }
        else 
        {
            tComp[i] = '1';
        }
    }
    for (int i = index; i < str.length(); i++)
    {
        tComp[i] = str[i];
    }
    return tComp;
}

void c1(string n)
{
    string src1 = n.substr(8,5);
    string offset = n.substr(13, 19);
    //int src1Binary = stoi(src1);
    //int offsetBinary = stoi(offset);
    if (n.substr(3,5) == "10000")
    {
        instruction = "CBZ";
        address+= 4;
        //cycle += 1;

    }
    else if (n.substr(3,5) == "10001")
    {
        instruction = "CBNZ";
        address+= 4;
        //cycle += 1;
    }
    if (binaryToDecimal(stoi(src1)) == 31)
    {
        src1 = "XZR";
        address+= 4;
        //cycle += 1;
    }
    else 
    {
        stringstream ss;
        ss << binaryToDecimal(stoi(src1));
        string str = ss.str();
        src1 = "X" + str;
    }
    if (offset[0] == '1')
    {
        stringstream ss;
        string temp = twoCompliment(offset);
        //offset = binaryToDecimal(stoi(temp));
        //twoCompliment(offset);
        ss << binaryToDecimal(stoi(temp));
        string str = ss.str();
        temp = "#-" + str;  

        stringstream aa;
        aa << address;
        string str2 = aa.str();
        string address = str2;

        simInstruction = instruction + " " + src1 + ", " + temp;
        dFile<<n<<"\t"<<address<<"\t"<<instruction<<" "<<src1<<", "<<temp<<endl;
        //sFile<<"--------------------"<<'\n'<<"Cycle "<<cycle<<": \t"<<address<<"\t"<<instruction<<" "<<src1<<", "<<temp<<endl;
    }
    else {
        stringstream ss;
        ss << binaryToDecimal(stoi(offset));
        //binaryToDecimal(stoi(offset));
        string str = ss.str();
        offset = "#" + str;  

        stringstream aa;
        aa << address;
        string str2 = aa.str();
        string address = str2;

        simInstruction = instruction + " " + src1 + ", " + offset;
        dFile<<n<<"\t"<<address<<"\t"<<instruction<<" "<<src1<<", "<<offset<<endl; //HERE
    }
}

void c2(string n)
{
    string dest = n.substr(10,5); 
    string src1 = n.substr(15,5); 
    string iValue = n.substr(20, 12);

    if (n.substr(3,7) == "1000000")
    {
        instruction = "ORRI";
        address += 4; 
        //cycle += 1;
    }
    else if (n.substr(3,7) == "1000001")
    {
        //EORI
        instruction = "EORI";
        address += 4;
        //cycle += 1;
    }
    else if (n.substr(3,7) == "1000010")
    {
        //ADDI
        instruction = "ADDI";
        address += 4; 
        //cycle += 1;
    }
    else if (n.substr(3,7) == "1000011")
    {
        //SUBI
        instruction = "SUBI";
        address += 4;
        //cycle += 1; 
    }
    else if (n.substr(3,7) == "1000100")
    {
        //ANDI
        instruction = "ANDI";
        address += 4;
        //cycle += 1;
    }
    if (binaryToDecimal(stoi(src1)) == 31)
    {
        src1 = "XZR";
        address+= 4;
        //cycle += 1;
    }
    else 
    {
        stringstream ss;
        ss << binaryToDecimal(stoi(src1));
        string str = ss.str();
        src1 = "X" + str;
    }
    stringstream ss;
    ss << binaryToDecimal(stoi(dest));
    string str = ss.str();
    dest = "X" + str;

    stringstream ii;
    ii << binaryToDecimal(stoi(iValue));
    string istr = ii.str();
    iValue = "#" + istr; 

    stringstream aa;
    aa << address;
    string str2 = aa.str();
    string address = str2;

    simInstruction = instruction + " " + dest + ", " + src1 + ", " + iValue + "";
    dFile<<n<<"\t"<<address<<"\t"<<instruction<<" "<<dest<<", "<<src1<<", "<<iValue<<""<<endl;
    //sFile<<"--------------------"<<'\n'<<"Cycle "<<cycle<<": \t"<<address<<"\t"<<instruction<<" "<<dest<<", "<<src1<<", "<<iValue<<""<<endl;
}

void c3(string n)
{
    string dest = n.substr(11,5);
    string src1 = n.substr(16,5);
    string src2 = n.substr(21,5);

    if (n.substr(3,8) == "10100000")
    {
        //EOR
        instruction = "EOR";
        address += 4;
        //cycle += 1;
    }
    else if (n.substr(3,8) == "10100010")
    {
        //ADD
        instruction = "ADD";
        address += 4;
        //cycle += 1;
    }
    else if (n.substr(3,8) == "10100011")
    {
        //SUB
        instruction = "SUB";
        address += 4;
        //cycle += 1;
    }
    else if (n.substr(3,8) == "10100100")
    {
        //AND
        instruction = "AND";
        address += 4;
        //cycle += 1;
    }
    else if (n.substr(3,8) == "10100101")
    {
        //ORR
        instruction = "ORR";
        address += 4;
        //cycle += 1;
    }
    else if (n.substr(3,8) == "10100110")
    {
        //LSR
        instruction = "LSR";
        address += 4;
        //cycle += 1;
    }
    else if (n.substr(3,8) == "10100111")
    {
        //LSL
        instruction = "LSL";
        address += 4;
        //cycle += 1;
    }
    if (binaryToDecimal(stoi(src1)) == 31)
    {
        src1 = "XZR";
        address+= 4;
        //cycle += 1;
    }
    else 
    {
        stringstream ss;
        ss << binaryToDecimal(stoi(src1));
        string str = ss.str();
        src1 = "X" + str;
    }
    stringstream ss;
    ss << binaryToDecimal(stoi(dest));
    string str = ss.str();
    dest = "X" + str;

    stringstream ii;
    ii << binaryToDecimal(stoi(src2));
    string istr = ii.str();
    src2 = "X" + istr;  

    stringstream aa;
    aa << address;
    string str2 = aa.str();
    string address = str2;

    simInstruction = instruction + " " + dest + ", " + src1 + ", " + src2 + "";
    dFile<<n<<"\t"<<address<<"\t"<<instruction<<" "<<dest<<", "<<src1<<", "<<src2<<""<<endl;
    //sFile<<"--------------------"<<'\n'<<"Cycle "<<cycle<<": \t"<<address<<"\t"<<instruction<<" "<<dest<<", "<<src1<<", "<<src2<<""<<endl;
}

void c4(string n)
{
    string srcdst = n.substr(11,5);
    string src1 = n.substr(16,5);
    string iValue = n.substr(21,11); 
    if (n.substr(3,8) == "10101010")
    {
        //LDUR
        instruction = "LDUR";
        address += 4;
        //cycle += 1;
    }
    else if (n.substr(3,8) == "10101011")
    {
        //STUR
        instruction = "STUR";
        address += 4;
        //cycle += 1;
    } 
    if (binaryToDecimal(stoi(src1)) == 31)
    {
        src1 = "XZR";
    }
    else 
    {
        stringstream ss;
        ss << binaryToDecimal(stoi(src1));
        string str = ss.str();
        src1 = "X" + str;
    }
    stringstream ss;
    ss << binaryToDecimal(stoi(srcdst));
    string str = ss.str();
    srcdst = "X" + str;

    stringstream ii;
    ii << binaryToDecimal(stoi(iValue));
    string str1 = ii.str();
    iValue = "#" + str1;

    stringstream aa;
    aa << address;
    string str2 = aa.str();
    string address = str2;

    simInstruction = instruction + " " + srcdst + ", [" + src1 + ", " + iValue + "]";
    dFile<<n<<"\t"<<address<<"\t"<<instruction<<" "<<srcdst<<", ["<<src1<<", "<<iValue<<"]"<<endl;
    //sFile<<"--------------------"<<'\n'<<"Cycle "<<cycle<<": \t"<<address<<"\t"<<instruction<<" "<<srcdst<<", ["<<src1<<", "<<iValue<<"]"<<endl;
}

void getCategory(string n)
{ 
    if (n.substr(0,3) == "001"){ 
        //get cat 1 
        c1(n);
    }
    else if (n.substr(0,3) == "010"){ 
        //get cat 2
        c2(n);
    }
    else if (n.substr(0,3) == "011"){ 
        //get cat 3
        c3(n);
    }
    else if (n.substr(0,3) == "100"){ 
        //get cat 4 
        c4(n);
    }
    else if (n.substr(0,3) == "000"){
        address += 4;
        //cycle += 1;
        int out = binaryToDecimal(stoi(n));

        stringstream aa;
        aa << address;
        string str2 = aa.str();
        string address = str2;

        //data[address] = instruction;

        simInstruction = out;
        dFile<<n<<"\t"<<address<<"\t"<<out<< endl;
        //sFile<<"--------------------"<<'\n'<<"Cycle "<<cycle<<": \t"<<address<<"\t"<<out<<endl;
    }
    else if (n.substr(0,3) == "111")
    {
        address += 4;
        //cycle += 1;
        string temp = twoCompliment(n); 
        int out = binaryToDecimal(stoi(temp));
        
        stringstream aa;
        aa << address;
        string str2 = aa.str();
        string address = str2;

        //data[address] = instruction;

        simInstruction =  "-" + temp;
        dFile<<n<<"\t"<<address<<"\t"<<"-"<<out<< endl;
        //sFile<<"--------------------"<<'\n'<<"Cycle "<<cycle<<": \t"<<address<<"\t"<<"-"<<out<<endl;
    }
    else 
    {
        address += 4;
        //cycle += 1;
        dFile<<n<<"\t"<<address<<"\t"<<"DUMMY"<<"\t"<< endl;
        //sFile<<"--------------------"<<'\n'<<"Cycle "<<cycle<<": \t"<<address<<"\t"<<"DUMMY"<<endl;
    }
}

void simulator(string n){
    map<string, int> registers; 
    map<int, string> instructions;
    map<int, string> data; //memory
    int regValue = 0; //registers value 

 //registers: 0-31 -> register value
 //instructions: pc -> binary instruction
 //memory: pc -> data

    for(int i=0; i<32; i++){
        string reg = "X"+(to_string(i));
        registers[reg] = 0;
    }
    int index = instructions.begin()->first;
    //while (instruction[index] != 10100000000000000000000000000000){
    sFile<<"--------------------"<<endl;
    sFile<<"Cycle "<<cycle<<":"<<'\t'<<index<<'\t'; 
    cycle += 1;
    instructions[address] = instruction;
    sFile<<simInstruction<<endl; //here prob
    sFile<<endl;
    sFile<<"Registers"<<endl;

    n = "X"+(to_string(regValue));

    if(regValue == 0){
        sFile<<"X00:"<<'\t';
    }
    while(regValue < 8){
        sFile<<registers.at(n)<<'\t';
        regValue += 1;
    }
    if(regValue == 8){
        //sFile<<endl;
        sFile<<'\n'<<"X08:"<<'\t';
    }
    while(regValue>=8 && regValue<16){
        sFile<<registers.at(n)<<'\t';
        regValue++;
    }
    if(regValue==16){
        sFile<<endl;
        sFile<<"X16:"<<'\t';
    }
    while(regValue>=16 && regValue<24){
        sFile<<registers.at(n)<<'\t';
        regValue++;
    }
    if(regValue==24){
        sFile<<endl;
        sFile<<"X24:"<<'\t';
    }
    while(regValue>=24 && regValue<32){
        sFile<<registers.at(n)<<'\t';
        regValue++;
    }
    sFile<<endl;
    sFile<<endl;

    sFile<<"Data"<<endl; 
    string data1 = "";
    string data2 = "";
    int count = 0;

    //data[address] = instruction;

    // if(count < 8)
    // {
    //     data1 += data.at(address) + '\t';
    // }   
    // if(count >= 8){
    //     data2 += data.at(address) + '\t';
    // }

    // sFile<<data.begin()->first<<":"<<'\t'<<data1<<endl;
    // sFile<<((data.begin()->first)+32)<<":"<<'\t'<<data2<<endl;
    // sFile<<endl;
    //}
}

int main(int argc, char **argv)
{
    //string line;
    string filename(argv[1]);
    ifstream file(filename);   
    //ofstream dFile("disassembly.txt");
    //ofstream sFile ("simulation.txt");

    if (file.is_open()){
        string line;
        while (getline(file, line)){
        //getCategory(line);
        //dFile<<line<<'\n';
        getCategory(line);
        simulator(line);
        }
        file.close();
    }    
}